<?xml version="1.0"?>
<!DOCTYPE bindings [
    <!ENTITY % xulstringsDTD SYSTEM "chrome://dkim_verifier/locale/xulstrings.dtd">
    %xulstringsDTD;
]>

<bindings id="dkim-verifier-bindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">
  <binding id="dkim-verifier-box">
    <content>
      <xul:description anonid="headerValue"
                       class="headerValue"
                       readonly="true"
                       context="copyPopup"
                       role="textbox"
                       aria-readonly="true" />
      <xul:image anonid="dkimWarningIcon"
                 class="alert-icon"
                 tooltip="dkim-verifier-header-tooltip-warnings"/>
      <xul:hbox anonid="arhDkim">
        <xul:description anonid="arhDkimLabel"
                         class="headerValue"
                         style="text-align: right"
          >&dkim_verifier.statusbar.title;</xul:description>
        <xul:description anonid="arhDkimValue"
                         class="headerValue"
                         readonly="true"
                         context="copyPopup"
                         role="textbox"
                         aria-readonly="true" />
      </xul:hbox>
      <xul:hbox anonid="spf">
        <xul:description anonid="spfLabel"
                         class="headerValue"
                         style="text-align: right"
          >&dkim_verifier.header.spf;</xul:description>
        <xul:description anonid="spfValue"
                         class="headerValue"
                         readonly="true"
                         context="copyPopup"
                         role="textbox"
                         aria-readonly="true" />
      </xul:hbox>
      <xul:hbox anonid="dmarc">
        <xul:description anonid="dmarcLabel"
                         class="headerValue"
                         style="text-align: right"
          >&dkim_verifier.header.dmarc;</xul:description>
        <xul:description anonid="dmarcValue"
                         class="headerValue"
                         readonly="true"
                         context="copyPopup"
                         role="textbox"
                         aria-readonly="true" />
      </xul:hbox>
      <xul:separator flex="1"/>
    </content>
    <implementation>
      <field name="headerValue">document.getAnonymousElementByAttribute(this, "anonid", "headerValue");</field>
      <field name="tooltip">document.getAnonymousElementByAttribute(this, "anonid", "tooltip");</field>
      <field name="headerSPFValue">document.getAnonymousElementByAttribute(this, "anonid", "spfValue");</field>
      <field name="headerDMARCValue">document.getAnonymousElementByAttribute(this, "anonid", "dmarcValue");</field>
      <field name="headerArhDKIMValue">document.getAnonymousElementByAttribute(this, "anonid", "arhDkimValue");</field>

      <property name="value">
        <setter><![CDATA[
          this.headerValue.textContent = val;
        ]]></setter>
      </property>
      <property name="warnings">
        <setter><![CDATA[
          this.setAttribute("warnings", val.length > 0);
        ]]></setter>
      </property>
      <property name="spfValue">
        <setter><![CDATA[
          if (val) {
            this.setAttribute("spf", true);
          } else {
            this.setAttribute("spf", false);
          }
          this.headerSPFValue.textContent = val;
        ]]></setter>
      </property>
      <property name="dmarcValue">
        <setter><![CDATA[
          if (val) {
            this.setAttribute("dmarc", true);
          } else {
            this.setAttribute("dmarc", false);
          }
          this.headerDMARCValue.textContent = val;
        ]]></setter>
      </property>
      <property name="arhDkimValue">
        <setter><![CDATA[
          if (val) {
            this.setAttribute("arhDkim", true);
          } else {
            this.setAttribute("arhDkim", false);
          }
          this.headerArhDKIMValue.textContent = val;
        ]]></setter>
      </property>
    </implementation>
  </binding>
  
  <binding id="dkim-verifier-statusbarpanel-box">
    <content dkimStatus="loading">
      <xul:statusbarpanel anonid="statusbarpanel-box">
        <xul:label anonid="title"
                   class="statusbarpanel-text"
                   value="&dkim_verifier.statusbar.title;" />
        <xul:label anonid="statusValue"
                   class="statusbarpanel-text"
                   readonly="true"
                   context="copyPopup"
                   role="textbox"
                   aria-readonly="true" />
        <xul:image anonid="warning-icon"
                   class="statusbarpanel-icon"
                   tooltip="dkim-verifier-tooltip-warnings"/>
        <xul:tooltip id="dkim-verifier-tooltip-warnings">
          <xul:vbox anonid="tooltip-warnings"/>
        </xul:tooltip>
        <xul:image anonid="status-icon"
                   class="statusbarpanel-icon"
                   tooltip="dkim-verifier-tooltip-status"
                   hidden="true"/>
        <xul:tooltip anonid="tooltip-status" id="dkim-verifier-tooltip-status">
          <xul:label anonid="tooltip-status-value"/>
          <xul:vbox anonid="tooltip-status-warnings"/>
        </xul:tooltip>
      </xul:statusbarpanel>
    </content>
    <implementation>
      <field name="statusbarpanelBox">document.getAnonymousElementByAttribute(this, "anonid", "statusbarpanel-box");</field>
      <field name="statusValue">document.getAnonymousElementByAttribute(this, "anonid", "statusValue");</field>
      <field name="warningIcon">document.getAnonymousElementByAttribute(this, "anonid", "warning-icon");</field>
      <field name="tooltipWarnings">document.getAnonymousElementByAttribute(this, "anonid", "tooltip-warnings");</field>
      <field name="statusIcon">document.getAnonymousElementByAttribute(this, "anonid", "status-icon");</field>
      <field name="tooltipStatusValue">document.getAnonymousElementByAttribute(this, "anonid", "tooltip-status-value");</field>
      <field name="tooltipStatusWarnings">document.getAnonymousElementByAttribute(this, "anonid", "tooltip-status-warnings");</field>

      <property name="hidden">
        <setter><![CDATA[
          this.statusbarpanelBox.hidden = val;
        ]]></setter>
      </property>
      <property name="value">
        <setter><![CDATA[
          this.statusValue.textContent = val;
          this.tooltipStatusValue.textContent = val;
        ]]></setter>
      </property>
      <property name="warnings">
        <setter><![CDATA[
          var d;

          // delete old warnings from tooltips
          while (this.tooltipWarnings.firstChild) {
            this.tooltipWarnings.removeChild(this.tooltipWarnings.firstChild);
          }
          while (this.tooltipStatusWarnings.firstChild) {
            this.tooltipStatusWarnings.removeChild(this.tooltipStatusWarnings.firstChild);
          }
          
          // add warnings to warning tooltip
          for (let w of val) {
            d = document.createElement("description");
            d.textContent = w;
            this.tooltipWarnings.appendChild(d);
          }
          
          // add separator between status value and warnings
          if (val.length > 0) {
            d = document.createElement("separator");
            d.setAttribute("class", "thin");
            this.tooltipStatusWarnings.appendChild(d);
          }
          // add warnings tooltip to status tooltip
          this.tooltipStatusWarnings.appendChild(this.tooltipWarnings.cloneNode(true));
          
          // set warnings attribute
          this.setAttribute("warnings", (!!this.tooltipWarnings.firstChild).toString());
        ]]></setter>
      </property>
      <property name="dkimStatus">
        <setter><![CDATA[
          this.setAttribute('dkimStatus', val);
        ]]></setter>
      </property>
      <property name="useIcons">
        <setter><![CDATA[
          this.statusValue.setAttribute('hidden', val);
          this.warningIcon.setAttribute('hidden', val);
          this.statusIcon.setAttribute('hidden', !val);
        ]]></setter>
      </property>
    </implementation>
  </binding>
  
  <binding id="dkim-verifier-header-tooltips-box">
    <content>
      <xul:tooltip id="dkim-verifier-header-tooltip-warnings">
        <xul:vbox anonid="tooltip-warnings"/>
      </xul:tooltip>
      <xul:tooltip anonid="tooltip-from" id="dkim-verifier-header-tooltip-from">
        <xul:hbox>
          <xul:label value="&dkim_verifier.statusbar.title;"/>
          <xul:vbox flex="1">
            <xul:label anonid="tooltip-from-value"/>
            <xul:vbox anonid="tooltip-from-warnings"/>
          </xul:vbox>
        </xul:hbox>
      </xul:tooltip>
    </content>
    <implementation>
      <field name="tooltipWarnings">
        document.getAnonymousElementByAttribute(this, "anonid", "tooltip-warnings");
      </field>
      <field name="tooltipFromValue">
        document.getAnonymousElementByAttribute(this, "anonid", "tooltip-from-value");
      </field>
      <field name="tooltipFromWarnings">
        document.getAnonymousElementByAttribute(this, "anonid", "tooltip-from-warnings");
      </field>

      <property name="value">
        <setter><![CDATA[
          this.tooltipFromValue.textContent = val;
        ]]></setter>
      </property>
      <property name="warnings">
        <setter><![CDATA[
          var d;

          // delete old warnings from tooltips
          while (this.tooltipWarnings.firstChild) {
            this.tooltipWarnings.removeChild(this.tooltipWarnings.firstChild);
          }
          while (this.tooltipFromWarnings.firstChild) {
            this.tooltipFromWarnings.removeChild(this.tooltipFromWarnings.firstChild);
          }
          
          // add warnings to warning tooltip
          for (let w of val) {
            d = document.createElement("description");
            d.textContent = w;
            this.tooltipWarnings.appendChild(d);
          }
          
          // add separator between status value and warnings
          if (val.length > 0) {
            d = document.createElement("separator");
            d.setAttribute("class", "thin");
            this.tooltipFromWarnings.appendChild(d);
          }
          // add warnings tooltip to from tooltip
          this.tooltipFromWarnings.appendChild(this.tooltipWarnings.cloneNode(true));
        ]]></setter>
      </property>
    </implementation>
  </binding>

  <binding id="dkim-mail-multi-emailHeaderField"
           extends="chrome://messenger/content/mailWidgets.xml#mail-multi-emailHeaderField">
    <content>
      <xul:hbox class="headerValueBox" anonid="longEmailAddresses" flex="1"
                singleline="true"
                align="baseline">
        <xul:description anonid="dkimFavicon"
                         class="headerValue"
                         tooltip="dkim-verifier-header-tooltip-from"
                         value="" /> <!-- dummy text for align baseline -->
        <xul:description class="headerValue" containsEmail="true"
                         anonid="emailAddresses" flex="1"
                         orient="vertical" pack="start" />
      </xul:hbox>
      <xul:label class="moreIndicator" onclick="this.parentNode.toggleWrap()"
                 collapsed="true" anonid="more"/>
    </content>
    <implementation>
      <field name="dkimFavicon">document.getAnonymousElementByAttribute(this, "anonid", "dkimFavicon");</field>

      <property name="dkimFaviconUrl">
        <setter><![CDATA[
          this.dkimFavicon.style.backgroundImage = "url('" + val + "')";
          this.dkimFavicon.style.backgroundPosition = "center center";
          this.dkimFavicon.style.backgroundRepeat = "no-repeat";
          if (val) {
            this.setAttribute("dkimFavicon", true);
          } else {
            this.setAttribute("dkimFavicon", false);
          }
        ]]></setter>
      </property>
    </implementation>
  </binding>
</bindings>
<!-- vim: set et ts=2 sw=2 : -->
